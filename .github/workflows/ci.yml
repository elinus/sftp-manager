name: Build Check

# Trigger this workflow on push or pull request to main or develop branches
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # üáÆüá≥ Every Sunday at 8:00 AM IST (2:30 AM UTC)
    - cron: '30 2 * * 0'

# Environment variables for the entire workflow
env:
  CARGO_TERM_COLOR: always # Force colored output for cargo commands

jobs:
  # -----------------------------
  # Job 1: Syntax and dependency check
  # -----------------------------
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Rust stable toolchain
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Cache cargo registry to speed up downloads
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Step 4: Cache cargo git index (for dependencies from git repos)
      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      # Step 5: Cache target directory (build artifacts)
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      # Step 6: Check that the code compiles
      - name: Check code
        run: cargo check --all-features --verbose

  # -----------------------------
  # Job 2: Run test suite
  # -----------------------------
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check # Run after a check job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache all cargo artifacts and dependencies for faster test runs
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-

      # Run all tests
      - name: Run tests
        run: cargo test --all-features --verbose

  # -----------------------------
  # Job 3: Check code formatting
  # -----------------------------
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      # Run rustfmt in check mode (does not modify files)
      - name: Check formatting
        run: cargo fmt --all -- --check

  # -----------------------------
  # Job 4: Run Clippy linter
  # -----------------------------
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: check # Run after syntax/dependency check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Clippy
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      # Cache dependencies to speed up Clippy runs
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-

      # Run Clippy and treat warnings as errors
      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

  # -----------------------------
  # Job 5: Final build check
  # -----------------------------
  build:
    name: Check Build
    runs-on: ubuntu-latest
    needs: [test, fmt, clippy] # Run after test, fmt, and clippy jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache dependencies to speed up build
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Fast check that the project compiles
      - name: Check if code compiles
        run: cargo check --verbose

      # Optional: Actually build the project binary
      # Uncomment to build artifacts
      # - name: Build project
      #   run: cargo build --verbose

  # ------------------------------------
  # Job 6: Notify Success / Failure / PR
  # ------------------------------------
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - name: Send Discord Notification
        continue-on-error: true
        run: |
          # Determine status
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            STATUS_ICON="‚úÖ"
            STATUS_TEXT="CI passed"
            COLOR=3066993 # green
            TITLE="üöÄ Deployment ready!"
          else
            STATUS_ICON="‚ùå"
            STATUS_TEXT="CI failed"
            COLOR=15158332 # red
            TITLE="Build requires attention"
          fi

          # Common metadata
          REPO_NAME="${{ github.repository }}"
          BRANCH_NAME="${{ github.ref_name }}"
          AUTHOR_NAME="${{ github.event.head_commit.author.name }}"
          COMMIT_MSG=$(echo "${{ github.event.head_commit.message }}" | head -n 1 | sed 's/"/\\"/g' | cut -c1-80)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EVENT_NAME="${{ github.event_name }}"
          WORKFLOW_NAME="${{ github.workflow }}"

          # Adjust message for PR
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/"/\\"/g')
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            AUTHOR_NAME="${{ github.event.pull_request.user.login }}"
            HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            STATUS_ICON="üîÄ"
            STATUS_TEXT="PR checks passed"
            COLOR=3447003 # blue
            TITLE="Pull request ready for review"
            COMMIT_MSG="${PR_TITLE}"
            BRANCH_NAME="${HEAD_BRANCH}"
          fi

          # Format message
          DESCRIPTION="${STATUS_ICON} ${STATUS_TEXT} for **${REPO_NAME}**\\nüì¶ Branch: \`${BRANCH_NAME}\`  |  üßë‚Äçüíª Author: ${AUTHOR_NAME}\\nüìù  \`${SHORT_SHA}\`  |  ${COMMIT_MSG}\\n\\n[View build details](${RUN_URL})"

          # Send Discord embed
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"username\": \"CI Bot\",
                 \"avatar_url\": \"https://api.dicebear.com/7.x/bottts-neutral/png?seed=ci-bot&backgroundType=gradientLinear&size=128\",
                 \"embeds\": [{
                   \"title\": \"${TITLE}\",
                   \"description\": \"${DESCRIPTION}\",
                   \"color\": ${COLOR},
                   \"footer\": { \"text\": \"${WORKFLOW_NAME}\" },
                   \"timestamp\": \"${TIMESTAMP}\"
                 }]
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
